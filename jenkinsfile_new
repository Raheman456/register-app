pipeline {
    agent any

    environment {
        // Define environment variables
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE_NAME = 'ayaz4/tomcat-new'
        DOCKER_IMAGE_TAG = 'LATEST'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${tomcat-new}:${LATEST}")
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests inside the Docker container
                    docker.image("${tomcat-new}:${LATEST}").inside {
                        sh 'yum test' // Replace with your test command
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub (or another registry)
                    withCredentials([usernamePassword(credentialsId: 'ayaz4', usernameVariable: 'ayaz4', passwordVariable: '123456789')]) {
                        sh "echo ${123456789} | docker login -u ${ayaz4} --password-stdin ${DOCKER_REGISTRY}"
                    }

                    // Push the Docker image to the registry
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-hub-creds') {
                        docker.image("${tomcat-new}:${LATEST}").push()
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Optional: Add deployment steps here
                    echo 'Deploying application...'
                    // Example: SSH into a server and pull the new image
                    // sh 'ssh user@server "docker pull ${tomcat-new}:${LATEST} && docker-compose up -d"'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
